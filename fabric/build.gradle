plugins {
    id 'com.github.johnrengelman.shadow'
    id "com.modrinth.minotaur"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
    include("com.technicjelle:BMUtils:4.2.1")
    include('com.github.ErdbeerbaerLP:toml4j:wip-SNAPSHOT')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

modrinth {
    if (project.hasProperty('modrinth.apikey')) { // $GRADLE_USER_HOME/gradle.properties
        token = getProperty("modrinth.apikey")
        projectId = 'OGGG6gVy'
        versionNumber = version + "-${project.minecraft_version}"
        versionName = "BlueMapFrontiers-Fabric $version (MC ${project.minecraft_version})"
        uploadFile = remapJar
        changelog = project.changelog
        gameVersions = ["${project.minecraft_version}"]
        loaders = ['fabric']
        versionType = project.releaseType.toUpperCase()
        dependencies {
            required.project "bluemap"
            required.project "mapfrontiers"
        }
    }
}